import {inspect} from 'util'

export class UnsafeMigrationException extends Error {
  constructor(statement: string) {
    super('unsafe/destructive change being autogenerated, refusing to carry on further', {cause: statement})
  }
}

export function checkForDrop(s: string): boolean {
  const regex = /(drop\s+)/i
  return regex.test(s)
}

export class Statements {
  safe: boolean
  array: string[]

  constructor(...args: Array<string | string[]>) {
    this.array = args.flat()
    this.safe = true
  }

  [Symbol.iterator]() {
    return this.array[Symbol.iterator]()
  }

  toJSON() {
    return this.array
  }

  concat(other: Statements | string[]) {
    const strings = other instanceof Statements ? other.array : other
    return new Statements(...this.array, ...strings)
  }

  get length(): number {
    return this.array.length
  }

  join(separator: string): string {
    return this.array.join(separator)
  }

  some(callback: (value: string, index: number, array: string[]) => unknown): boolean {
    return this.array.some(callback)
  }

  push(...items: string[]): number {
    return this.array.push(...items)
  }

  append(s: string): this {
    return this.add([s])
  }

  get sql(): string {
    if (this.safe) {
      this.raiseIfUnsafe()
    }

    if (this.length === 0) {
      return ''
    }

    return this.join('\n\n') + '\n\n'
  }

  raiseIfUnsafe(): void {
    // deviation: pasing the unsafe statement into the error message
    const unsafe = this.array.find(s => checkForDrop(s))
    if (unsafe) {
      throw new UnsafeMigrationException(unsafe)
    }
  }

  add(other: string[] | Statements): this {
    const strings = other instanceof Statements ? other.array : other
    try {
      this.push(...strings)
      return this
    } catch (cause) {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      throw new Error(`can't push ${inspect(other)}`, {cause})
    }
  }
}
