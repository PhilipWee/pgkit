import * as fsSyncer from 'fs-syncer'
import {test, beforeEach, expect} from 'vitest'
import * as typegen from '../src'
import {getPureHelper as getHelper} from './helper'

export const {typegenOptions, logger, poolHelper: helper} = getHelper({__filename})

beforeEach(async () => {
  await helper.setupDb()
  await helper.pool.query(helper.sql`
    create table test_table(foo int not null, bar text);

    comment on column test_table.bar is 'Look, ma! A comment from postgres!'
  `)
})

test('example typegen', async () => {
  const syncer = fsSyncer.testFixture({
    expect,
    targetState: {
      'index.ts': `
        import * as pgs from '@pgkit/client'

        export default async () => {
          const pool = pgs.createPool('...connection string...')

          const results = await pool.query(pgs.sql\`select foo, bar from test_table\`)

          results.rows.forEach(r => {
            console.log(r.foo) // foo has type 'number'
            console.log(r.bar) // bar has type 'string | null'
          })
        }
      `,
    },
  })

  syncer.sync()

  await typegen.generate(typegenOptions(syncer.baseDir))

  expect(syncer.yaml()).toMatchInlineSnapshot(`
    "---
    index.ts: |-
      import * as pgs from '@pgkit/client'

      export default async () => {
        const pool = pgs.createPool('...connection string...')

        const results = await pool.query(pgs.sql<queries.TestTable>\`select foo, bar from test_table\`)

        results.rows.forEach(r => {
          console.log(r.foo) // foo has type 'number'
          console.log(r.bar) // bar has type 'string | null'
        })
      }

      export declare namespace queries {
        // Generated by @pgkit/typegen

        /** - query: \`select foo, bar from test_table\` */
        export interface TestTable {
          /** column: \`public.test_table.foo\`, not null: \`true\`, regtype: \`integer\` */
          foo: number

          /**
           * Look, ma! A comment from postgres!
           *
           * column: \`public.test_table.bar\`, regtype: \`text\`
           */
          bar: string | null
        }
      }
    "
  `)
})
