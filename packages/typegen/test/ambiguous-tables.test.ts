import * as fsSyncer from 'fs-syncer'
import {test, beforeEach, expect} from 'vitest'
import * as typegen from '../src'
import {getHelper} from './helper'

export const {typegenOptions, logger, poolHelper: helper} = getHelper({__filename})

beforeEach(async () => {
  await helper.setupDb()

  await helper.pool.query(helper.sql`
    drop schema if exists ambiguous_tables_1 cascade;
    drop schema if exists ambiguous_tables_2 cascade;

    create schema ambiguous_tables_1;
    create schema ambiguous_tables_2;

    -- default schema
    create type test_enum as enum('default_schema_A', 'default_schema_B', 'default_schema_C');
    -- specific schema
    create type ambiguous_tables_1.test_enum as enum('schema1_A', 'schema1_B', 'schema1_C');
    -- another specific schema
    create type ambiguous_tables_2.test_enum as enum('schema2_A', 'schema2_B', 'schema2_C');

    create table ambiguous_tables_1.test_table(id int not null, e ambiguous_tables_1.test_enum, eee test_enum not null);
    create table ambiguous_tables_2.test_table(id int, e ambiguous_tables_2.test_enum);

    comment on column ambiguous_tables_1.test_table.id is 'This is a comment for ambiguous_tables_1.test_table.id';
    comment on column ambiguous_tables_2.test_table.id is 'This is a comment for ambiguous_tables_2.test_table.id';
  `)
})

test('disambiguate between same-named tables', async () => {
  const syncer = fsSyncer.testFixture({
    expect,
    targetState: {
      'index.ts': `
        import {sql} from '@pgkit/client'

        export default [
          sql\`select * from ambiguous_tables_1.test_table\`,
          sql\`select * from ambiguous_tables_2.test_table\`,
        ]
      `,
    },
  })

  syncer.sync()

  await typegen.generate(typegenOptions(syncer.baseDir))

  const result = syncer.read()

  expect(result['index.ts']).toMatchInlineSnapshot(`
    "import {sql} from '@pgkit/client'

    export default [
      sql<queries.TestTable>\`select * from ambiguous_tables_1.test_table\`,
      sql<queries.Id_e>\`select * from ambiguous_tables_2.test_table\`,
    ]

    export declare namespace queries {
      // Generated by @pgkit/typegen

      /** - query: \`select * from ambiguous_tables_1.test_table\` */
      export interface TestTable {
        /**
         * This is a comment for ambiguous_tables_1.test_table.id
         *
         * column: \`ambiguous_tables_1.test_table.id\`, not null: \`true\`, regtype: \`integer\`
         */
        id: number

        /** column: \`ambiguous_tables_1.test_table.e\`, regtype: \`ambiguous_tables_1.test_enum\` */
        e: ('schema1_A' | 'schema1_B' | 'schema1_C') | null

        /** column: \`ambiguous_tables_1.test_table.eee\`, not null: \`true\`, regtype: \`test_enum\` */
        eee: 'default_schema_A' | 'default_schema_B' | 'default_schema_C'
      }

      /** - query: \`select * from ambiguous_tables_2.test_table\` */
      export interface Id_e {
        /**
         * This is a comment for ambiguous_tables_2.test_table.id
         *
         * column: \`ambiguous_tables_2.test_table.id\`, regtype: \`integer\`
         */
        id: number | null

        /** column: \`ambiguous_tables_2.test_table.e\`, regtype: \`ambiguous_tables_2.test_enum\` */
        e: ('schema2_A' | 'schema2_B' | 'schema2_C') | null
      }
    }
    "
  `)
  expect(result['index.ts']).toContain(`This is a comment for ambiguous_tables_1.test_table.id`)
  expect(result['index.ts']).toContain(
    'column: `ambiguous_tables_1.test_table.id`, not null: `true`, regtype: `integer`',
  )
  expect(result['index.ts']).toContain(`This is a comment for ambiguous_tables_2.test_table.id`)
  expect(result['index.ts']).toContain('column: `ambiguous_tables_2.test_table.id`, regtype: `integer`')

  // eslint-disable-next-line unicorn/template-indent
  expect(syncer.yaml().replace('---', '')).toMatchInlineSnapshot(`
    "
    index.ts: |-
      import {sql} from '@pgkit/client'

      export default [
        sql<queries.TestTable>\`select * from ambiguous_tables_1.test_table\`,
        sql<queries.Id_e>\`select * from ambiguous_tables_2.test_table\`,
      ]

      export declare namespace queries {
        // Generated by @pgkit/typegen

        /** - query: \`select * from ambiguous_tables_1.test_table\` */
        export interface TestTable {
          /**
           * This is a comment for ambiguous_tables_1.test_table.id
           *
           * column: \`ambiguous_tables_1.test_table.id\`, not null: \`true\`, regtype: \`integer\`
           */
          id: number

          /** column: \`ambiguous_tables_1.test_table.e\`, regtype: \`ambiguous_tables_1.test_enum\` */
          e: ('schema1_A' | 'schema1_B' | 'schema1_C') | null

          /** column: \`ambiguous_tables_1.test_table.eee\`, not null: \`true\`, regtype: \`test_enum\` */
          eee: 'default_schema_A' | 'default_schema_B' | 'default_schema_C'
        }

        /** - query: \`select * from ambiguous_tables_2.test_table\` */
        export interface Id_e {
          /**
           * This is a comment for ambiguous_tables_2.test_table.id
           *
           * column: \`ambiguous_tables_2.test_table.id\`, regtype: \`integer\`
           */
          id: number | null

          /** column: \`ambiguous_tables_2.test_table.e\`, regtype: \`ambiguous_tables_2.test_enum\` */
          e: ('schema2_A' | 'schema2_B' | 'schema2_C') | null
        }
      }
    "
  `)
})
