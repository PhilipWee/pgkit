import * as fsSyncer from 'fs-syncer'
import {test, beforeEach, expect, vi as jest} from 'vitest'
import * as typegen from '../src'
import {getPureHelper} from './helper'

export const {typegenOptions, logger, poolHelper: helper} = getPureHelper({__filename})

beforeEach(async () => {
  jest.resetAllMocks()

  await helper.setupDb()
  await helper.pool.query(helper.sql`
    create table test_table1(
      a int not null
    );
    create table test_table2(
      b double precision
    );
    create table test_table3(
      c int not null
    );
    create view test_view as
    select a as a_view, b as b_view from
    test_table1
    join test_table2 on test_table1.a = test_table2.b;

    create or replace function get_test_table1_by_a(input_a int)
    returns table (a int) as $$
      select a from test_table1 where a = input_a;
    $$ language sql;
  `)
})

test('use view', async () => {
  const syncer = fsSyncer.testFixture({
    expect,
    targetState: {
      'index.ts': `
        import {sql} from 'slonik'

        export default sql\`
          select * from test_view
          join test_table3 on test_view.a_view = test_table3.c
        \`
      `,
    },
  })

  syncer.sync()

  await typegen.generate(typegenOptions(syncer.baseDir))

  expect(logger.warn).not.toHaveBeenCalled()
  expect(logger.error).not.toHaveBeenCalled()

  expect(syncer.yaml()).toMatchInlineSnapshot(`
    "---
    index.ts: |-
      import {sql} from 'slonik'

      export default sql<queries.TestView_TestTable3>\`
        select * from test_view
        join test_table3 on test_view.a_view = test_table3.c
      \`

      export declare namespace queries {
        // Generated by @pgkit/typegen

        /** - query: \`select * from test_view join test_table3 on test_view.a_view = test_table3.c\` */
        export interface TestView_TestTable3 {
          /**
           * From view "test_view", column source: public.test_table1.a
           *
           * column: \`✨.test_view.a_view\`, not null: \`true\`, regtype: \`integer\`
           */
          a_view: number

          /**
           * From view "test_view", column source: public.test_table2.b
           *
           * column: \`✨.test_view.b_view\`, regtype: \`double precision\`
           */
          b_view: number | null

          /** column: \`public.test_table3.c\`, not null: \`true\`, regtype: \`integer\` */
          c: number
        }
      }
    "
  `)
})

test.only('use function', async () => {
  const syncer = fsSyncer.testFixture({
    expect,
    targetState: {
      'index.ts': `
        import {sql} from 'slonik'

        export const a = sql\`
          select * from get_test_table1_by_a(1)
        \`
      `,
    },
  })

  syncer.sync()

  await typegen.generate(typegenOptions(syncer.baseDir))

  expect(logger.warn).not.toHaveBeenCalled()
  expect(logger.error).not.toHaveBeenCalled()

  expect(syncer.yaml()).toMatchInlineSnapshot(`
    "---
    index.ts: |-
      import {sql} from 'slonik'

      export const a = sql<queries.A>\`
        select * from get_test_table1_by_a(1)
      \`

      export declare namespace queries {
        // Generated by @pgkit/typegen

        /** - query: \`select * from get_test_table1_by_a(1)\` */
        export interface A {
          /** regtype: \`integer\` */
          a: number | null
        }
      }
    "
  `)
})
