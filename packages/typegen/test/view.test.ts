import * as fsSyncer from 'fs-syncer'
import {test, beforeEach, expect, vi as jest} from 'vitest'
import * as typegen from '../src'
import {getPureHelper} from './helper'

export const {typegenOptions, logger, poolHelper: helper} = getPureHelper({__filename})

beforeEach(async () => {
  jest.resetAllMocks()

  await helper.setupDb()
  await helper.pool.query(helper.sql`
    create table test_table1(
      a int not null
    );
    create table test_table2(
      b double precision
    );
    create table test_table3(
      c int not null
    );
    create view test_view as
    select a as a_view, b as b_view from
    test_table1
    join test_table2 on test_table1.a = test_table2.b;
    create or replace function get_test_table1_by_a(input_a int)
    returns table (a int) as
    $$
      select a from test_table1 where a = input_a;
    $$
    language sql;
    create or replace function get_a_timestamp(input_a int)
    returns timestamptz as
    $$
      select pg_catalog.now()
    $$
    language sql;
    create or replace function get_one_field(input_a int)
    returns int as
    $$
      select a from test_table1 where a >= input_a;
    $$
    language sql;
  `)
})

test('use view', async () => {
  const syncer = fsSyncer.testFixture({
    expect,
    targetState: {
      'index.ts': `
        import {sql} from 'slonik'

        export default sql\`
          select * from test_view
        \`
      `,
    },
  })

  syncer.sync()

  await typegen.generate(typegenOptions(syncer.baseDir))

  expect(logger.warn).not.toHaveBeenCalled()
  expect(logger.error).not.toHaveBeenCalled()

  expect(syncer.yaml()).toMatchInlineSnapshot(`
    "---
    index.ts: |-
      import {sql} from 'slonik'

      export default sql<queries.TestView>\`
        select * from test_view
      \`

      export declare namespace queries {
        // Generated by @pgkit/typegen

        /** - query: \`select * from test_view\` */
        export interface TestView {
          /** column: \`public.test_view.a_view\`, regtype: \`integer\` */
          a_view: number | null

          /** column: \`public.test_view.b_view\`, regtype: \`double precision\` */
          b_view: number | null
        }
      }
    "
  `)
})

test('use function', async () => {
  const syncer = fsSyncer.testFixture({
    expect,
    targetState: {
      'index.ts': `
        import {sql} from 'slonik'
        export const a = sql\`
          select * from get_test_table1_by_a(1)
        \`
        export const b = sql\`
          select
            x.*,
            get_a_timestamp(1) as y,
            get_one_field(1) as z
          from get_test_table1_by_a(1) x
        \`
        export const c = sql\`
          select *
          from
          get_test_table1_by_a(1) x,
          get_a_timestamp(1) y,
          get_one_field(1) z
        \`
      `,
    },
  })

  syncer.sync()

  await typegen.generate(typegenOptions(syncer.baseDir))

  expect(logger.warn).not.toHaveBeenCalled()
  expect(logger.error).not.toHaveBeenCalled()

  expect(syncer.yaml()).toMatchInlineSnapshot(`
    "---
    index.ts: |-
      import {sql} from 'slonik'
      export const a = sql<queries.A>\`
        select * from get_test_table1_by_a(1)
      \`
      export const b = sql<queries.X>\`
        select
          x.*,
          get_a_timestamp(1) as y,
          get_one_field(1) as z
        from get_test_table1_by_a(1) x
      \`
      export const c = sql<queries.C>\`
        select *
        from
        get_test_table1_by_a(1) x,
        get_a_timestamp(1) y,
        get_one_field(1) z
      \`

      export declare namespace queries {
        // Generated by @pgkit/typegen

        /** - query: \`select * from get_test_table1_by_a(1)\` */
        export interface A {
          /**
           * From function "get_test_table1_by_a", column source: public.test_table1.a
           *
           * column: \`✨.get_test_table1_by_a.a\`, not null: \`true\`, regtype: \`integer\`
           */
          a: number
        }

        /** - query: \`select x.*, get_a_timestamp(1) as y, get_one_field(1) as z from get_test_table1_by_a(1) x\` */
        export interface X {
          /**
           * From function "get_test_table1_by_a", column source: public.test_table1.a
           *
           * column: \`✨.get_test_table1_by_a.a\`, not null: \`true\`, regtype: \`integer\`
           */
          a: number

          /** regtype: \`timestamp with time zone\` */
          y: Date | null

          /** regtype: \`integer\` */
          z: number | null
        }

        /** - query: \`select * from get_test_table1_by_a(1) x, get_a_timestamp(1) y, get_one_field(1) z\` */
        export interface C {
          /**
           * From function "get_test_table1_by_a", column source: public.test_table1.a
           *
           * column: \`✨.get_test_table1_by_a.a\`, not null: \`true\`, regtype: \`integer\`
           */
          a: number

          /** regtype: \`timestamp with time zone\` */
          y: Date | null

          /** regtype: \`integer\` */
          z: number | null
        }
      }
    "
  `)
})
