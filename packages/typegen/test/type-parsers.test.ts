import * as fsSyncer from 'fs-syncer'
// import {createTypeParserPreset} from 'slonik'
import {test, beforeEach, expect} from 'vitest'
import * as typegen from '../src'
import {getPureHelper as getHelper} from './helper'

export const {typegenOptions, logger, poolHelper: helper} = getHelper({__filename})

beforeEach(async () => {
  await helper.setupDb()
})

// const {pool} = getPoolHelper({
//   __filename,
//   baseConnectionURI: typegenOptions(__dirname).connectionString.slice(),
//   config: {
//     typeParsers: [
//       ...createTypeParserPreset(),
//       {
//         name: 'timestamptz',
//         parse: str => new Date(str),
//       },
//       {
//         name: 'int8',
//         parse: BigInt,
//       },
//       {
//         name: 'bool',
//         parse: Boolean,
//       },
//       {
//         name: 'json',
//         parse: () => Symbol(`this won't be matched by anything so should result in an 'unknown' type`),
//       },
//     ],
//   },
// })

test('type parsers have types inferred', async () => {
  const syncer = fsSyncer.testFixture({
    expect,
    targetState: {
      'index.ts': `
        import {sql} from 'slonik'
  
        export default [
          sql\`select '2000-01-01'::timestamptz, 1::int8, true::bool, '{}'::json\`,
        ]
      `,
    },
  })

  const baseParams = typegenOptions(syncer.baseDir)

  syncer.sync()

  await typegen.generate(baseParams)

  expect(syncer.yaml()).toMatchInlineSnapshot(`
    "---
    index.ts: |-
      import {sql} from 'slonik'

      export default [
        sql<queries.Timestamptz_int8_bool_json>\`select '2000-01-01'::timestamptz, 1::int8, true::bool, '{}'::json\`,
      ]

      export declare namespace queries {
        // Generated by @pgkit/typegen

        /** - query: \`select '2000-01-01'::timestamptz, 1::int8, true::bool, '{}'::json\` */
        export interface Timestamptz_int8_bool_json {
          /** regtype: \`timestamp with time zone\` */
          timestamptz: Date | null

          /** regtype: \`bigint\` */
          int8: number | null

          /** regtype: \`boolean\` */
          bool: boolean | null

          /** regtype: \`json\` */
          json: unknown
        }
      }
    "
  `)
})
