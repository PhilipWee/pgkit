import * as fsSyncer from 'fs-syncer'
import * as typegen from '../src'
import {getHelper} from './helper'

export const {typegenOptions, logger, poolHelper: helper} = getHelper({__filename})

beforeEach(async () => {
  await helper.pool.query(helper.sql`
    create table test_table(
      id int primary key,
      n int unique
    );
  `)
})

test('returning with on conflict', async () => {
  const syncer = fsSyncer.jestFixture({
    targetState: {
      'index.ts': `
        import {sql} from 'slonik'

        export default sql\`
          insert into test_table(id, n)
          values (1, 1)
          on conflict (id)
          do update set
          n = excluded.n
          returning id
        \`
      `,
    },
  })

  syncer.sync()

  await typegen.generate(typegenOptions(syncer.baseDir))

  expect(syncer.yaml()).toMatchInlineSnapshot(`
    "---
    index.ts: |-
      import {sql} from 'slonik'
      
      export default sql<queries.TestTable>\`
        insert into test_table(id, n)
        values (1, 1)
        on conflict (id)
        do update set
        n = excluded.n
        returning id
      \`
      
      export declare namespace queries {
        // Generated by @slonik/typegen
      
        /** - query: \`insert into test_table(id, n) values (1, 1) on conflict (id) do update set n = excluded.n returning id\` */
        export interface TestTable {
          /** column: \`returning_test.test_table.id\`, not null: \`true\`, regtype: \`integer\` */
          id: number
        }
      }
      "
    `)
})
