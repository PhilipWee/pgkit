import * as fsSyncer from 'fs-syncer'
import {test, beforeEach, expect, vi as jest} from 'vitest'
import * as typegen from '../src'
import {getPureHelper} from './helper'

export const {typegenOptions, logger, poolHelper: helper} = getPureHelper({__filename})

beforeEach(async () => {
  jest.resetAllMocks()

  await helper.setupDb()
  await helper.pool.query(helper.sql`
    create table test_table1(
      a int primary key,
      b int
    );

    create table test_table2(
      a int not null,
      table1_a int references test_table1(a)
    );
  `)
})

test('cascading deletes', async () => {
  const syncer = fsSyncer.testFixture({
    expect,
    targetState: {
      'index.ts': `
        import {sql} from 'slonik'

        export default [
          (x: number) => sql\`
            with deleted_2 as (
              delete from test_table2
              where table1_a = \${x}
              returning *
            ),
            deleted_1 as (
              delete from test_table1
              where a = \${x}
              returning *
            )
            select
              deleted_1.*,
              (select count(*) from deleted_2) as deleted_2_count
            from deleted_1
          \`
        ]
      `,
    },
  })

  syncer.sync()

  await typegen.generate(typegenOptions(syncer.baseDir))

  expect(logger.warn).not.toHaveBeenCalled()
  expect(logger.error).not.toHaveBeenCalled()

  expect(syncer.yaml()).toMatchInlineSnapshot(`
    "---
    index.ts: |-
      import {sql} from 'slonik'

      export default [
        (x: number) => sql<queries.Deleted1>\`
          with deleted_2 as (
            delete from test_table2
            where table1_a = \${x}
            returning *
          ),
          deleted_1 as (
            delete from test_table1
            where a = \${x}
            returning *
          )
          select
            deleted_1.*,
            (select count(*) from deleted_2) as deleted_2_count
          from deleted_1
        \`,
      ]

      export declare namespace queries {
        // Generated by @pgkit/typegen

        /** - query: \`with deleted_2 as ( delete from test_tab... [truncated] ...ted_2) as deleted_2_count from deleted_1\` */
        export interface Deleted1 {
          /**
           * From CTE subquery "deleted_1", column source: public.test_table1.a
           *
           * column: \`✨.deleted_1.a\`, not null: \`true\`, regtype: \`integer\`
           */
          a: number

          /**
           * From CTE subquery "deleted_1", column source: public.test_table1.b
           *
           * column: \`✨.deleted_1.b\`, regtype: \`integer\`
           */
          b: number | null

          /**
           * From CTE subquery "subquery_1_for_column_deleted_2_count"
           *
           * column: \`✨.subquery_1_for_column_deleted_2_count.deleted_2_count\`, not null: \`true\`, regtype: \`bigint\`
           */
          deleted_2_count: number
        }
      }
    "
  `)
})

test('union all', async () => {
  const syncer = fsSyncer.testFixture({
    expect,
    targetState: {
      'index.ts': `
        import {sql} from 'slonik'

        export default [
          (x: number) => sql\`
            select a, b, 4321 as c from test_table1
            union all
            select a::decimal, table1_a as b, 1234 as c from test_table2
          \`
        ]
      `,
    },
  })

  syncer.sync()

  await typegen.generate(typegenOptions(syncer.baseDir))

  expect(logger.warn).not.toHaveBeenCalled()
  expect(logger.error).not.toHaveBeenCalled()

  expect(syncer.yaml()).toMatchInlineSnapshot(`
    "---
    index.ts: |-
      import {sql} from 'slonik'

      export default [
        (x: number) => sql<queries._void>\`
          select a, b, 4321 as c from test_table1
          union all
          select a::decimal, table1_a as b, 1234 as c from test_table2
        \`,
      ]

      export declare namespace queries {
        // Generated by @pgkit/typegen

        /** - query: \`select a, b, 4321 as c from test_table1 union all select a::decimal, table1_a as b, 1234 as c from test_table2\` */
        export interface _void {
          /** not null: \`true\`, regtype: \`integer | numeric\` */
          a: number

          /** not null: \`true\`, regtype: \`integer\` */
          b: number

          /** not null: \`true\`, regtype: \`integer\` */
          c: number
        }
      }
    "
  `)
})
